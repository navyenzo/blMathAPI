#ifndef BL_ROOTFINDING_HPP
#define BL_ROOTFINDING_HPP



//-------------------------------------------------------------------
// FILE:            blRootFinding.hpp
// CLASS:           None
// BASE CLASS:      None
//
// PURPOSE:         A collection of root finding
//                  methods to solve equations of
//                  the type:  f(x) = 0
//
// AUTHOR:          Vincenzo Barbato
//                  http://www.barbatolabs.com
//                  navyenzo@gmail.com
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements a single step in the
// Inverse Quadratic Interpolation Method
//-------------------------------------------------------------------
template<typename blDataType>

inline blDataType& bisectionStep(const blDataType& a,
                                 const blDataType& b,
                                 const blDataType& Fa,
                                 const blDataType& Fb,
                                 blDataType& xnew)
{
    xnew = (a + b) / blDataType(2);

    return xnew;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements a single step in the
// False Position Method
//-------------------------------------------------------------------
template<typename blDataType>

inline blDataType& falsePositionStep(blDataType a,
                                     blDataType b,
                                     blDataType Fa,
                                     blDataType Fb,
                                     blDataType& xnew)
{
    xnew = (a + b) / blDataType(2);

    return xnew;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements a single step in the
// Secant Method
//-------------------------------------------------------------------
template<typename blDataType>

inline blDataType& secantStep(blDataType a,
                              blDataType b,
                              blDataType Fa,
                              blDataType Fb,
                              blDataType& xnew)
{
    xnew = (Fb*a - Fa*b) / (Fb - Fa);

    return xnew;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements a single step in the
// Inverse Quadratic Interpolation Method
//-------------------------------------------------------------------
template<typename blDataType>

inline blDataType& inverseQuadraticInterpolationStep(const blDataType& a,
                                                     const blDataType& b,
                                                     const blDataType& c,
                                                     const blDataType& Fa,
                                                     const blDataType& Fb,
                                                     const blDataType& Fc,
                                                     blDataType& xnew)
{
    xnew = (
             a * (Fb * Fc) / ((Fa - Fb)*(Fa - Fc)) +
             b * (Fa * Fc) / ((Fb - Fa)*(Fb - Fc)) +
             c * (Fa * Fb) / ((Fc - Fa)*(Fc - Fb))
           );

    return xnew;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implement the Bisection Method
//-------------------------------------------------------------------
template<typename blDataType,
         typename blFunctorType>

inline blDataType bisectionMethod(blDataType a,
                                  blDataType b,
                                  const blFunctorType& functor,
                                  const blDataType& TOL,
                                  const int& maxIterations)
{
    // First we check for the specified
    // bounds being the same

    if(a == b)
    {
        return a;
    }



    // Here we evaluate the function at
    // the specified bounds

    auto Fa = functor(a);
    auto Fb = functor(b);



    // Now we check if there is a root
    // between the specified bounds
    // including the bounds themselves

    if(Fa == 0)
        return a;
    else if(Fb == 0)
        return b;
    else if(Fa * Fb > 0)
    {
        return Fa;
    }



    // Now we move on with the bisection method

    blDataType c = a;
    auto Fc = Fa;

    blDataType c_old;
    blDataType errorValue;

    int iterations = 0;

    do
    {
        c_old = c;

        c = (a + b) / blDataType(2);

        Fc = functor(c);

        if(sign(Fc) == sign(Fa))
            a = c;
        else
            b = c;

        errorValue = sign(c - c_old) * (c - c_old) / c;

        ++iterations;
    }
    while((iterations < maxIterations) &&
          (Fc != returnType(0)) &&
          (errorValue > TOL));



    // We return the found root

    return c;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements the False Position Method
//-------------------------------------------------------------------
template<typename blDataType,
         typename blFunctorType>

inline blDataType falsePositionMethod(blDataType a,
                                      blDataType b,
                                      const blFunctorType& functor,
                                      const blDataType& TOL,
                                      const int& maxIterations)
{
    // First we check for the specified
    // bounds being the same

    if(a == b)
    {
        return a;
    }



    // Here we evaluate the function at
    // the specified bounds

    auto Fa = functor(a);
    auto Fb = functor(b);



    // Now we check if there is a root
    // between the specified bounds
    // including the bounds themselves

    if(Fa == 0)
        return a;
    else if(Fb == 0)
        return b;
    else if(Fa * Fb > 0)
    {
        return Fa;
    }
    if(a == b)
    {
        return a;
    }



    // Now we move on with the false position method

    blDataType c = a;
    auto Fc = Fa;

    blDataType c_old;
    blDataType errorValue;

    int iterations = 0;

    do
    {
        c_old = c;

        c = c = (Fb*a - Fa*b) / (Fb - Fa);

        Fc = functor(c);

        if(sign(Fc) == sign(Fa))
        {
            a = c;
            Fa = functor(a);
        }
        else
        {
            b = c;
            Fb = functor(b);
        }

        errorValue = sign(c - c_old) * (c - c_old) / c;

        ++iterations;
    }
    while((iterations < maxIterations) &&
          (Fc != returnType(0)) &&
          (errorValue > TOL));



    // We return the found root

    return c;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements the Newton Raphson Method
//-------------------------------------------------------------------
template<typename blDataType,
         typename blFunctorType,
         typename blFunctorDerivativeType>

inline blDataType newtonRaphsonMethod(blDataType xi,
                                      const blFunctorType& functor,
                                      const blFunctorDerivativeType& functorDerivative,
                                      const blDataType& TOL,
                                      const int& maxIterations)
{
    // The evaluated
    // function and
    // function
    // derivative

    blDataType F = functor(xi);
    blDataType Fd = functorDerivative(xi);



    // The new root
    // value

    blDataType xi_new = xi - F/Fd;



    // The error
    // variable

    blDataType errorValue = (sign(xi_new - xi)*(xi_new - xi) / xi_new);



    // The current number
    // of iterations while
    // we're solving for
    // the root

    int iterations = 0;

    while((iterations < maxIterations) &&
          (sign(F)*F > TOL) &&
          (errorValue > TOL))
    {
        // Store the newly
        // found root value

        xi = xi_new;



        // Calculate the
        // new root and
        // the functor
        // value at the
        // new root

        F = functor(xi);
        Fd = functorDerivative(xi);

        xi_new = xi - F/Fd;



        // Calculate the
        // error for the
        // newly calculated
        // root value

        errorValue = (sign(xi_new - xi)*(xi_new - xi) / xi_new);

        ++iterations;
    }



    // We return the found root

    return xi_new;
}
//-------------------------------------------------------------------



//-------------------------------------------------------------------
// This function implements Brent's Method
//-------------------------------------------------------------------
template<typename blDataType,
         typename blFunctorType,
         typename blFunctorDerivativeType>

inline blDataType brentsMethod(blDataType a,
                               blDataType b,
                               const blFunctorType& functor,
                               const blDataType& TOL,
                               const int& maxIterations)
{
    // First we check for the specified
    // bounds being the same

    if(a == b)
    {
        return a;
    }



    // Here we evaluate the function at
    // the specified bounds

    auto Fa = functor(a);
    auto Fb = functor(b);



    // Now we check if there is a root
    // between the specified bounds
    // including the bounds themselves

    if(Fa == 0)
        return a;
    else if(Fb == 0)
        return b;
    else if(Fa * Fb > 0)
    {
        return Fa;
    }
    if(a == b)
    {
        return a;
    }



    // Now we move on with Brent's method

    blDataType c = a;
    auto Fc = Fa;

    blDataType c_old;
    blDataType errorValue;

    int iterations = 0;

    do
    {
        if(Fc != Fa && Fc != Fb)
        {
            // In this case we use the
            // Inverse Quadratic Interpolation
            // method

            inverseQuadraticInterpolationStep(a,b,c,Fa,Fb,Fc);
        }
        else
        {
            // In this case we use the secant method


        }

        errorValue = sign(c - c_old) * (c - c_old) / c;

        ++iterations;
    }
    while((iterations < maxIterations) &&
          (Fc != returnType(0)) &&
          (errorValue > TOL));



    // We return the found root

    return c;
}
//-------------------------------------------------------------------



#endif // BL_ROOTFINDING_HPP
